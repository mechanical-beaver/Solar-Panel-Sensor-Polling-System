/*
 * Author: @github.com/annadostoevskaya
 * Filename: OPT4003Q1.cpp
 * Created: 01 Jul 2025 06:47:10
 * Last Update: 01 Jul 2025 06:54:38
 *
 * Description: <EMPTY>
 */

#ifdef NOTHING

#define OPT4003Q1_VISIBLE (0) ///< channel 0
#define OPT4003Q1_IR      (1) ///< channel 1

#define OPT4003Q1_I2C_ADDR (0x44) ///< Default I2C address

/// OPT4003Q1 I2C address options (based on ADDR pin configuration)
enum {
    OPT4003Q1_I2C_ADDR_GND = 0x44, // ADDR pin connected to GND
    OPT4003Q1_I2C_ADDR_VDD = 0x45, // ADDR pin connected to VDD
    OPT4003Q1_I2C_ADDR_SDA = 0x46, // ADDR pin connected to SDA
    OPT4003Q1_I2C_ADDR_SCL = 0x47, // ADDR pin connected to SCL
};

/// OPT4003Q1 Register map
enum {
    // Channel 0 - Result upper (Exponent + MSB)
    OPT4003Q1_REGISTER_CH0_RESULT_UPPER    = 0x00, // EXPONENT + MSB
    OPT4003Q1_REGISTER_CH0_RESULT_EXPONENT = 0x00,
    OPT4003Q1_REGISTER_CH0_RESULT_MSB      = 0x00,

    // Channel 0 - Result lower (LSB + Counter + CRC)
    OPT4003Q1_REGISTER_CH0_RESULT_LOWER = 0x01,
    OPT4003Q1_REGISTER_CH0_RESULT_LSB   = 0x01,
    OPT4003Q1_REGISTER_CH0_COUNTER      = 0x01,
    OPT4003Q1_REGISTER_CH0_CRC          = 0x01,

    // Channel 1 - Result upper (Exponent + MSB)
    OPT4003Q1_REGISTER_CH1_RESULT_UPPER    = 0x02,
    OPT4003Q1_REGISTER_CH1_RESULT_EXPONENT = 0x02,
    OPT4003Q1_REGISTER_CH1_RESULT_MSB      = 0x02,

    // Channel 1 - Result lower (LSB + Counter + CRC)
    OPT4003Q1_REGISTER_CH1_RESULT_LOWER = 0x03,
    OPT4003Q1_REGISTER_CH1_RESULT_LSB   = 0x03,
    OPT4003Q1_REGISTER_CH1_COUNTER      = 0x03,
    OPT4003Q1_REGISTER_CH1_CRC          = 0x03,

    // FIFO CH0
    OPT4003Q1_REGISTER_FIFO_CH0_RESULT_UPPER = 0x04,
    OPT4003Q1_REGISTER_FIFO_CH0_EXPONENT     = 0x04,
    OPT4003Q1_REGISTER_FIFO_CH0_RESULT_MSB   = 0x04,

    OPT4003Q1_REGISTER_FIFO_CH0_RESULT_LOWER = 0x05,
    OPT4003Q1_REGISTER_FIFO_CH0_RESULT_LSB   = 0x05,
    OPT4003Q1_REGISTER_FIFO_CH0_COUNTER      = 0x05,
    OPT4003Q1_REGISTER_FIFO_CH0_CRC          = 0x05,

    // FIFO CH1
    OPT4003Q1_REGISTER_FIFO_CH1_RESULT_UPPER = 0x06,
    OPT4003Q1_REGISTER_FIFO_CH1_EXPONENT     = 0x06,
    OPT4003Q1_REGISTER_FIFO_CH1_RESULT_MSB   = 0x06,

    OPT4003Q1_REGISTER_FIFO_CH1_RESULT_LOWER = 0x07,
    OPT4003Q1_REGISTER_FIFO_CH1_RESULT_LSB   = 0x07,
    OPT4003Q1_REGISTER_FIFO_CH1_COUNTER      = 0x07,
    OPT4003Q1_REGISTER_FIFO_CH1_CRC          = 0x07,

    // Threshold low
    OPT4003Q1_REGISTER_THRESHOLD_LOW          = 0x08,
    OPT4003Q1_REGISTER_THRESHOLD_LOW_EXPONENT = 0x08,
    OPT4003Q1_REGISTER_THRESHOLD_LOW_RESULT   = 0x08,

    // Threshold high
    OPT4003Q1_REGISTER_THRESHOLD_HIGH          = 0x09,
    OPT4003Q1_REGISTER_THRESHOLD_HIGH_EXPONENT = 0x09,
    OPT4003Q1_REGISTER_THRESHOLD_HIGH_RESULT   = 0x09,

    // Config A
    OPT4003Q1_REGISTER_CONFIG_A        = 0x0A,
    OPT4003Q1_REGISTER_QWAKE           = 0x0A,
    OPT4003Q1_REGISTER_RANGE           = 0x0A,
    OPT4003Q1_REGISTER_CONVERSION_TIME = 0x0A,
    OPT4003Q1_REGISTER_OPERATING_MODE  = 0x0A,
    OPT4003Q1_REGISTER_LATCH           = 0x0A,
    OPT4003Q1_REGISTER_INT_POL         = 0x0A,
    OPT4003Q1_REGISTER_FAULT_COUNT     = 0x0A,

    // Config B
    OPT4003Q1_REGISTER_CONFIG_B                 = 0x0B,
    OPT4003Q1_REGISTER_THRESHOLD_CHANNEL_SELECT = 0x0B,
    OPT4003Q1_REGISTER_INT_DIRECTION            = 0x0B,
    OPT4003Q1_REGISTER_INT_CONFIG               = 0x0B,
    OPT4003Q1_REGISTER_I2C_BURST                = 0x0B,

    // Flags
    OPT4003Q1_REGISTER_FLAGS                 = 0x0C,
    OPT4003Q1_REGISTER_OVERLOAD_FLAG         = 0x0C,
    OPT4003Q1_REGISTER_CONVERSION_READY_FLAG = 0x0C,
    OPT4003Q1_REGISTER_FLAG_HIGH             = 0x0C,
    OPT4003Q1_REGISTER_FLAG_LOW              = 0x0C,

    // Device ID
    OPT4003Q1_REGISTER_DEVICE_ID      = 0x11,
    OPT4003Q1_REGISTER_DEVICE_ID_LOW  = 0x11,
    OPT4003Q1_REGISTER_DEVICE_ID_HIGH = 0x11,
};

/// OPT4003Q1 Register field masks
enum {
    // CH0 RESULT_UPPER (0x00)
    OPT4003Q1_MASK_CH0_EXPONENT   = 0xF000,
    OPT4003Q1_MASK_CH0_RESULT_MSB = 0x0FFF,

    // CH0 RESULT_LOWER (0x01)
    OPT4003Q1_MASK_CH0_RESULT_LSB = 0xFF00,
    OPT4003Q1_MASK_CH0_COUNTER    = 0x00F0,
    OPT4003Q1_MASK_CH0_CRC        = 0x000F,

    // CH1 RESULT_UPPER (0x02)
    OPT4003Q1_MASK_CH1_EXPONENT   = 0xF000,
    OPT4003Q1_MASK_CH1_RESULT_MSB = 0x0FFF,

    // CH1 RESULT_LOWER (0x03)
    OPT4003Q1_MASK_CH1_RESULT_LSB = 0xFF00,
    OPT4003Q1_MASK_CH1_COUNTER    = 0x00F0,
    OPT4003Q1_MASK_CH1_CRC        = 0x000F,

    // FIFO CH0 RESULT_UPPER (0x04)
    OPT4003Q1_MASK_FIFO_CH0_EXPONENT   = 0xF000,
    OPT4003Q1_MASK_FIFO_CH0_RESULT_MSB = 0x0FFF,

    // FIFO CH0 RESULT_LOWER (0x05)
    OPT4003Q1_MASK_FIFO_CH0_RESULT_LSB = 0xFF00,
    OPT4003Q1_MASK_FIFO_CH0_COUNTER    = 0x00F0,
    OPT4003Q1_MASK_FIFO_CH0_CRC        = 0x000F,

    // FIFO CH1 RESULT_UPPER (0x06)
    OPT4003Q1_MASK_FIFO_CH1_EXPONENT   = 0xF000,
    OPT4003Q1_MASK_FIFO_CH1_RESULT_MSB = 0x0FFF,

    // FIFO CH1 RESULT_LOWER (0x07)
    OPT4003Q1_MASK_FIFO_CH1_RESULT_LSB = 0xFF00,
    OPT4003Q1_MASK_FIFO_CH1_COUNTER    = 0x00F0,
    OPT4003Q1_MASK_FIFO_CH1_CRC        = 0x000F,

    // Threshold LOW (0x08)
    OPT4003Q1_MASK_THRESHOLD_LOW_EXPONENT = 0xF000,
    OPT4003Q1_MASK_THRESHOLD_LOW_RESULT   = 0x0FFF,

    // Threshold HIGH (0x09)
    OPT4003Q1_MASK_THRESHOLD_HIGH_EXPONENT = 0xF000,
    OPT4003Q1_MASK_THRESHOLD_HIGH_RESULT   = 0x0FFF,

    // Configuration A (0x0A)
    OPT4003Q1_MASK_CFG_QWAKE           = 0x1000,
    OPT4003Q1_MASK_CFG_RANGE           = 0x3C00,
    OPT4003Q1_MASK_CFG_CONVERSION_TIME = 0x03C0,
    OPT4003Q1_MASK_CFG_OPERATING_MODE  = 0x0030,
    OPT4003Q1_MASK_CFG_LATCH           = 0x0008,
    OPT4003Q1_MASK_CFG_INT_POL         = 0x0004,
    OPT4003Q1_MASK_CFG_FAULT_COUNT     = 0x0003,

    // Configuration B (0x0B)
    OPT4003Q1_MASK_CFG_THRESHOLD_CH_SEL = 0x0020,
    OPT4003Q1_MASK_CFG_INT_DIR          = 0x0010,
    OPT4003Q1_MASK_CFG_INT_CFG          = 0x000C,
    OPT4003Q1_MASK_CFG_I2C_BURST        = 0x0001,

    // Flags (0x0C)
    OPT4003Q1_MASK_FLAG_OVERLOAD         = 0x0008,
    OPT4003Q1_MASK_FLAG_CONVERSION_READY = 0x0004,
    OPT4003Q1_MASK_FLAG_HIGH             = 0x0002,
    OPT4003Q1_MASK_FLAG_LOW              = 0x0001,

    // Device ID (0x11)
    OPT4003Q1_MASK_DEVICE_ID_LOW  = 0x3000,
    OPT4003Q1_MASK_DEVICE_ID_HIGH = 0x0FFF,
};

/// OPT4003Q1 Register field shifts
enum {
    // CH0 RESULT_UPPER (0x00)
    OPT4003Q1_SHIFT_CH0_EXPONENT   = 12,
    OPT4003Q1_SHIFT_CH0_RESULT_MSB = 0,

    // CH0 RESULT_LOWER (0x01)
    OPT4003Q1_SHIFT_CH0_RESULT_LSB = 8,
    OPT4003Q1_SHIFT_CH0_COUNTER    = 4,
    OPT4003Q1_SHIFT_CH0_CRC        = 0,

    // CH1 RESULT_UPPER (0x02)
    OPT4003Q1_SHIFT_CH1_EXPONENT   = 12,
    OPT4003Q1_SHIFT_CH1_RESULT_MSB = 0,

    // CH1 RESULT_LOWER (0x03)
    OPT4003Q1_SHIFT_CH1_RESULT_LSB = 8,
    OPT4003Q1_SHIFT_CH1_COUNTER    = 4,
    OPT4003Q1_SHIFT_CH1_CRC        = 0,

    // FIFO CH0 RESULT_UPPER (0x04)
    OPT4003Q1_SHIFT_FIFO_CH0_EXPONENT   = 12,
    OPT4003Q1_SHIFT_FIFO_CH0_RESULT_MSB = 0,

    // FIFO CH0 RESULT_LOWER (0x05)
    OPT4003Q1_SHIFT_FIFO_CH0_RESULT_LSB = 8,
    OPT4003Q1_SHIFT_FIFO_CH0_COUNTER    = 4,
    OPT4003Q1_SHIFT_FIFO_CH0_CRC        = 0,

    // FIFO CH1 RESULT_UPPER (0x06)
    OPT4003Q1_SHIFT_FIFO_CH1_EXPONENT   = 12,
    OPT4003Q1_SHIFT_FIFO_CH1_RESULT_MSB = 0,

    // FIFO CH1 RESULT_LOWER (0x07)
    OPT4003Q1_SHIFT_FIFO_CH1_RESULT_LSB = 8,
    OPT4003Q1_SHIFT_FIFO_CH1_COUNTER    = 4,
    OPT4003Q1_SHIFT_FIFO_CH1_CRC        = 0,

    // Threshold LOW (0x08)
    OPT4003Q1_SHIFT_THRESHOLD_LOW_EXPONENT = 12,
    OPT4003Q1_SHIFT_THRESHOLD_LOW_RESULT   = 0,

    // Threshold HIGH (0x09)
    OPT4003Q1_SHIFT_THRESHOLD_HIGH_EXPONENT = 12,
    OPT4003Q1_SHIFT_THRESHOLD_HIGH_RESULT   = 0,

    // Configuration A (0x0A)
    OPT4003Q1_SHIFT_CFG_QWAKE           = 12,
    OPT4003Q1_SHIFT_CFG_RANGE           = 10,
    OPT4003Q1_SHIFT_CFG_CONVERSION_TIME = 6,
    OPT4003Q1_SHIFT_CFG_OPERATING_MODE  = 4,
    OPT4003Q1_SHIFT_CFG_LATCH           = 3,
    OPT4003Q1_SHIFT_CFG_INT_POL         = 2,
    OPT4003Q1_SHIFT_CFG_FAULT_COUNT     = 0,

    // Configuration B (0x0B)
    OPT4003Q1_SHIFT_CFG_THRESHOLD_CH_SEL = 5,
    OPT4003Q1_SHIFT_CFG_INT_DIR          = 4,
    OPT4003Q1_SHIFT_CFG_INT_CFG          = 2,
    OPT4003Q1_SHIFT_CFG_I2C_BURST        = 0,

    // Flags (0x0C)
    OPT4003Q1_SHIFT_FLAG_OVERLOAD         = 3,
    OPT4003Q1_SHIFT_FLAG_CONVERSION_READY = 2,
    OPT4003Q1_SHIFT_FLAG_HIGH             = 1,
    OPT4003Q1_SHIFT_FLAG_LOW              = 0,

    // Device ID (0x11)
    OPT4003Q1_SHIFT_DEVICE_ID_LOW  = 12,
    OPT4003Q1_SHIFT_DEVICE_ID_HIGH = 0,
};

struct OPT4003Q1_Config {
    uint16_t faultCount : 2;
    uint16_t interruptPolarity : 1;
    uint16_t latch : 1;
    uint16_t operatingMode : 2;
    uint16_t conversionTime : 4;
    uint16_t range : 4;
    uint16_t : 1;
    uint16_t qwake : 1;
};

struct OPT4003Q1_IntConfig {
    uint16_t i2cBurst : 1;
    uint16_t : 1;
    uint16_t intCfg : 2;
    uint16_t intDir : 1;
    uint16_t threadholdChSel : 1;
    uint16_t : 10;
};

struct OPT4003Q1_Status {
    uint16_t flagl : 1;
    uint16_t flagh : 1;
    uint16_t conversionReadyFlag : 1;
    uint16_t overloadFlag : 1;
    uint16_t : 12;
};

class Adafruit_OPT4003Q1 : public Adafruit_Sensor {
public:
    Adafruit_OPT4003Q1(int32_t sensorID = -1);
    ~Adafruit_OPT4003Q1();

    boolean begin(TwoWire *theWire, uint8_t addr = OPT4003Q1_I2C_ADDR);
    boolean begin(uint8_t addr = OPT4003Q1_I2C_ADDR);
}

#endif
